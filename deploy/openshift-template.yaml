apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: clementine-slack-bot
  annotations:
    description: "Clementine Slack bot for Tangerine AI integration"
    tags: "slack,bot,ai,tangerine"
    iconClass: "icon-python"
    openshift.io/display-name: "Clementine Slack Bot"
    openshift.io/documentation-url: "https://github.com/your-org/clementine"
    openshift.io/support-url: "https://github.com/your-org/clementine/issues"
    
parameters:
# Image configuration
- name: IMAGE
  displayName: "Container Image"
  description: "The container image to deploy"
  value: "quay.io/tangerineai/clementine"
  required: true

- name: IMAGE_TAG
  displayName: "Image Tag"
  description: "The tag for the container image"
  value: "latest"
  required: true

- name: APP_NAME
  displayName: "Application Name"
  description: "The name assigned to all application objects"
  value: "clementine"
  required: true

# Required Slack configuration
- name: SLACK_BOT_TOKEN
  displayName: "Slack Bot Token"
  description: "Slack bot token (xoxb-...)"
  required: true

- name: SLACK_SIGNING_SECRET
  displayName: "Slack Signing Secret"
  description: "Slack signing secret for request verification"
  required: true

- name: SLACK_APP_TOKEN
  displayName: "Slack App Token"
  description: "Slack app token for Socket Mode (xapp-...)"
  required: true

# Required Tangerine API configuration
- name: TANGERINE_API_URL
  displayName: "Tangerine API URL"
  description: "Base URL for the Tangerine API"
  required: true

- name: TANGERINE_API_TOKEN
  displayName: "Tangerine API Token"
  description: "Authentication token for Tangerine API"
  required: true

# Optional configuration with defaults
- name: LOG_LEVEL
  displayName: "Log Level"
  description: "Logging level (DEBUG, INFO, WARNING, ERROR)"
  value: "INFO"
  required: false

- name: LOG_FORMAT
  displayName: "Log Format"
  description: "Log message format string"
  value: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  required: false

- name: LOG_FILE
  displayName: "Log File Path"
  description: "Path to log file (empty for console only)"
  value: ""
  required: false

- name: BOT_NAME
  displayName: "Bot Name"
  description: "Display name for the bot"
  value: "Clementine"
  required: false

- name: ASSISTANT_LIST
  displayName: "Assistant List"
  description: "Comma-separated list of available assistants"
  value: "inscope-all-docs-agent"
  required: false


- name: TANGERINE_API_TIMEOUT
  displayName: "API Timeout"
  description: "Timeout for Tangerine API requests (seconds)"
  value: "500"
  required: false

- name: MODEL_OVERRIDE
  displayName: "Model Override"
  description: "Override model for Tangerine API requests (optional)"
  value: ""
  required: false

- name: ROOM_CONFIG_DB_PATH
  displayName: "Database Path"
  description: "Path to room configuration database"
  value: "/app/data/room_configs.db"
  required: false

- name: AI_DISCLOSURE_ENABLED
  displayName: "AI Disclosure Enabled"
  description: "Whether to show AI disclosure messages"
  value: "true"
  required: false

- name: AI_DISCLOSURE_TEXT
  displayName: "AI Disclosure Text"
  description: "Text shown in AI disclosure messages"
  value: "This response was generated by AI. Please verify important information."
  required: false

- name: FEEDBACK_ENABLED
  displayName: "Feedback Enabled"
  description: "Whether to enable user feedback functionality"
  value: "true"
  required: false

- name: SLACK_MIN_CONTEXT
  displayName: "Slack Min Context Size"
  description: "Minimum number of messages for Slack context (room config lower bound)"
  value: "50"
  required: false

- name: SLACK_MAX_CONTEXT
  displayName: "Slack Max Context Size"
  description: "Maximum number of messages for Slack context (room config upper bound)"
  value: "250"
  required: false

# Resource configuration
- name: MEMORY_LIMIT
  displayName: "Memory Limit"
  description: "Maximum amount of memory the container can use"
  value: "512Mi"
  required: false

- name: MEMORY_REQUEST
  displayName: "Memory Request"
  description: "Amount of memory to request for the container"
  value: "256Mi"
  required: false

- name: CPU_LIMIT
  displayName: "CPU Limit"
  description: "Maximum CPU the container can use"
  value: "500m"
  required: false

- name: CPU_REQUEST
  displayName: "CPU Request"
  description: "Amount of CPU to request for the container"
  value: "100m"
  required: false

- name: STORAGE_SIZE
  displayName: "Storage Size"
  description: "Size of persistent volume for database storage"
  value: "1Gi"
  required: false

objects:
# ConfigMap for non-sensitive configuration
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: "${APP_NAME}-config"
    labels:
      app: "${APP_NAME}"
  data:
    tangerine-api-url: "${TANGERINE_API_URL}"
    log-level: "${LOG_LEVEL}"
    log-format: "${LOG_FORMAT}"
    log-file: "${LOG_FILE}"
    bot-name: "${BOT_NAME}"
    assistant-list: "${ASSISTANT_LIST}"
    tangerine-api-timeout: "${TANGERINE_API_TIMEOUT}"
    model-override: "${MODEL_OVERRIDE}"
    room-config-db-path: "${ROOM_CONFIG_DB_PATH}"
    ai-disclosure-enabled: "${AI_DISCLOSURE_ENABLED}"
    ai-disclosure-text: "${AI_DISCLOSURE_TEXT}"
    feedback-enabled: "${FEEDBACK_ENABLED}"
    slack-min-context: "${SLACK_MIN_CONTEXT}"
    slack-max-context: "${SLACK_MAX_CONTEXT}"

# PersistentVolumeClaim for database storage
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${APP_NAME}-data"
    labels:
      app: "${APP_NAME}"
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: "${STORAGE_SIZE}"

# Deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: "${APP_NAME}"
    labels:
      app: "${APP_NAME}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: "${APP_NAME}"
    template:
      metadata:
        labels:
          app: "${APP_NAME}"
      spec:
        containers:
        - name: "${APP_NAME}"
          image: "${IMAGE}:${IMAGE_TAG}"
          imagePullPolicy: Always
          
          # Environment variables from secrets
          env:
          - name: SLACK_BOT_TOKEN
            valueFrom:
              secretKeyRef:
                name: "${APP_NAME}"
                key: SLACK_BOT_TOKEN
          - name: SLACK_SIGNING_SECRET
            valueFrom:
              secretKeyRef:
                name: "${APP_NAME}"
                key: SLACK_SIGNING_SECRET
          - name: SLACK_APP_TOKEN
            valueFrom:
              secretKeyRef:
                name: "${APP_NAME}"
                key: SLACK_APP_TOKEN
          - name: TANGERINE_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: "${APP_NAME}"
                key: TANGERINE_API_TOKEN
          
          # Environment variables from config map
          - name: TANGERINE_API_URL
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: tangerine-api-url
          - name: LOG_LEVEL
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: log-level
          - name: LOG_FORMAT
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: log-format
          - name: LOG_FILE
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: log-file
          - name: BOT_NAME
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: bot-name
          - name: ASSISTANT_LIST
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: assistant-list
          - name: TANGERINE_API_TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: tangerine-api-timeout
          - name: MODEL_OVERRIDE
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: model-override
          - name: ROOM_CONFIG_DB_PATH
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: room-config-db-path
          - name: AI_DISCLOSURE_ENABLED
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: ai-disclosure-enabled
          - name: AI_DISCLOSURE_TEXT
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: ai-disclosure-text
          - name: FEEDBACK_ENABLED
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: feedback-enabled
          - name: SLACK_MIN_CONTEXT
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: slack-min-context
          - name: SLACK_MAX_CONTEXT
            valueFrom:
              configMapKeyRef:
                name: "${APP_NAME}-config"
                key: slack-max-context
          
          # Resource limits and requests
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
              cpu: "${CPU_LIMIT}"
            requests:
              memory: "${MEMORY_REQUEST}"
              cpu: "${CPU_REQUEST}"
          
          # Volume mounts
          volumeMounts:
          - name: data-volume
            mountPath: /app/data
          - name: tmp-volume
            mountPath: /tmp
          
          # Health checks
          # Simple file-based health check - application should touch this file periodically
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - "test -f /tmp/health && test $(( $(date +%s) - $(stat -c %Y /tmp/health 2>/dev/null || echo 0) )) -lt 120"
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - "test -f /tmp/health"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          
          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - ALL
        
        # Pod security context
        securityContext:
          runAsNonRoot: true
        
        # Volumes
        volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: "${APP_NAME}-data"
        - name: tmp-volume
          emptyDir: {}
        
        # Restart policy
        restartPolicy: Always

# Service (optional - not required for Socket Mode but useful for monitoring)
- apiVersion: v1
  kind: Service
  metadata:
    name: "${APP_NAME}"
    labels:
      app: "${APP_NAME}"
  spec:
    ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP
    selector:
      app: "${APP_NAME}"
    type: ClusterIP
